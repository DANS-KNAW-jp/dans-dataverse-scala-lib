{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MANUAL \u00b6 Library with classes and functions for interacting with the Dataverse API. DEPRECATED: we are migrating our projects to https://github.com/DANS-KNAW/dans-dataverse-client-lib . DESCRIPTION \u00b6 Dataverse is an open source web application to share, preserve, cite, explore, and analyze research data. See: https://dataverse.org/about . It has several APIs that enable programmatic access. See: https://guides.dataverse.org/en/latest/api/index.html . This library facilitates accessing this API from Scala and Java code. INSTALLATION \u00b6 To use this library in a Maven-based project: Include in your pom.xml a declaration for the DANS maven repository: <repositories> <!-- possibly other repository declarations here ... --> <repository> <id>DANS</id> <releases> <enabled>true</enabled> </releases> <url>https://maven.dans.knaw.nl/releases/</url> </repository> </repositories> Include a dependency on this library. The version should of course be set to the latest version (or left out, if it is managed by an ancestor pom.xml ). <dependency> <groupId>nl.knaw.dans.lib</groupId> <artifactId>dans-dataverse-scala-lib_2.12</artifactId> <version>1.0.0</version> </dependency>","title":"Manual"},{"location":"#manual","text":"Library with classes and functions for interacting with the Dataverse API. DEPRECATED: we are migrating our projects to https://github.com/DANS-KNAW/dans-dataverse-client-lib .","title":"MANUAL"},{"location":"#description","text":"Dataverse is an open source web application to share, preserve, cite, explore, and analyze research data. See: https://dataverse.org/about . It has several APIs that enable programmatic access. See: https://guides.dataverse.org/en/latest/api/index.html . This library facilitates accessing this API from Scala and Java code.","title":"DESCRIPTION"},{"location":"#installation","text":"To use this library in a Maven-based project: Include in your pom.xml a declaration for the DANS maven repository: <repositories> <!-- possibly other repository declarations here ... --> <repository> <id>DANS</id> <releases> <enabled>true</enabled> </releases> <url>https://maven.dans.knaw.nl/releases/</url> </repository> </repositories> Include a dependency on this library. The version should of course be set to the latest version (or left out, if it is managed by an ancestor pom.xml ). <dependency> <groupId>nl.knaw.dans.lib</groupId> <artifactId>dans-dataverse-scala-lib_2.12</artifactId> <version>1.0.0</version> </dependency>","title":"INSTALLATION"},{"location":"api/","text":"API \u00b6 Open the Scaladocs in a new tab.","title":"API"},{"location":"api/#api","text":"Open the Scaladocs in a new tab.","title":"API"},{"location":"easy-dv/","text":"easy-dv \u00b6 Command line client for Dataverse. DESCRIPTION \u00b6 This project includes the example program easy-dv , which uses the library. Besides an example of how to use the library easy-dv also is a handy utility for managing a running Dataverse instance. The command line of easy-dv follows the structure of the API documentation which more a less groups functions by the object that they target. For example viewing the metadata of a dataset is achieved as follows: easy-dv dataset 'doi:10.5072/ABCDE' view EXAMPLES \u00b6 Creating a dataverse \u00b6 \u00b6 INSTALLATION AND CONFIGURATION \u00b6 Install via Yum \u00b6 Install from tarball \u00b6 Configuring credentials \u00b6","title":"Command-line client"},{"location":"easy-dv/#easy-dv","text":"Command line client for Dataverse.","title":"easy-dv"},{"location":"easy-dv/#description","text":"This project includes the example program easy-dv , which uses the library. Besides an example of how to use the library easy-dv also is a handy utility for managing a running Dataverse instance. The command line of easy-dv follows the structure of the API documentation which more a less groups functions by the object that they target. For example viewing the metadata of a dataset is achieved as follows: easy-dv dataset 'doi:10.5072/ABCDE' view","title":"DESCRIPTION"},{"location":"easy-dv/#examples","text":"","title":"EXAMPLES"},{"location":"easy-dv/#creating-a-dataverse","text":"","title":"Creating a dataverse"},{"location":"easy-dv/#_1","text":"","title":""},{"location":"easy-dv/#installation-and-configuration","text":"","title":"INSTALLATION AND CONFIGURATION"},{"location":"easy-dv/#install-via-yum","text":"","title":"Install via Yum"},{"location":"easy-dv/#install-from-tarball","text":"","title":"Install from tarball"},{"location":"easy-dv/#configuring-credentials","text":"","title":"Configuring credentials"},{"location":"examples/","text":"Examples \u00b6 This project contains sample code in Scala and Java that shows how to use the library. The examples are part of the same GitHub repository and can be found in the examples sub-module .","title":"Examples"},{"location":"examples/#examples","text":"This project contains sample code in Scala and Java that shows how to use the library. The examples are part of the same GitHub repository and can be found in the examples sub-module .","title":"Examples"}]}